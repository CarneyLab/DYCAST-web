@model string

<script src='https://api.mapbox.com/mapbox-gl-js/v0.41.0/mapbox-gl.js'></script>
<link href='https://api.mapbox.com/mapbox-gl-js/v0.41.0/mapbox-gl.css' rel='stylesheet' />
<script src='https://api.mapbox.com/mapbox.js/plugins/geojson-extent/v0.0.1/geojson-extent.js'></script>
<script src='//d3js.org/d3.v3.min.js' charset='utf-8'></script>

@{
    ViewData["Title"] = "Dycast map";
}

<div id='map' style='width: 100%; height: 60vh; margin-top: 140px;'></div>
<script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiY3Zhc3QiLCJhIjoiY2l5bmN3eTRsMDAweDRlcGZmeHlldjFjZSJ9.jcrrLVsU52pZ0ySw_pQlDw';

    var map = new mapboxgl.Map({
        container: 'map',
        center: [-45.81495207762998, -21.694545860417424],
        zoom: 13,
        style: 'mapbox://styles/mapbox/streets-v9'
    });


    map.on('click', function (e) {
        var features = map.queryRenderedFeatures(e.point, {
            layers: ['points']
        });

        if (!features.length) {
            return
        }

        var feature = features[0];

        var popup = new mapboxgl.Popup({ offset: [0, -15] })
            .setLngLat(feature.geometry.coordinates)
            .setHTML('<h3>' + feature.properties.title + '</h3><p>' +
            feature.properties.pValue + '</p>')
            .addTo(map)
    });


    map.on('load', function () {

        d3.json('/Map/GetRisk', function (err, data) {

            map.addSource('riskGeoJson', {
                type: 'geojson',
                data: data
            });

            // Separate source is required for heatmap, in order to fix bug with click event
            map.addSource('riskGeoJson2', {
                type: 'geojson',
                data: data
            });

            map.addLayer({
                'id': 'points',
                'type': 'circle',
                'source': 'riskGeoJson',
                'paint': {
                    'circle-color': {
                        property: 'pValue',
                        stops: [
                            [0.00001, '#FC0908'],
                            [1, '#FCA107']
                        ]
                    },
                    'circle-opacity': 0.75,
                    'circle-radius': 5
                }
            });


            map.addLayer({
                'id': 'heatmap',
                'type': 'heatmap',
                'source': 'riskGeoJson2',
                'paint': {
                    //Increase the heatmap weight based on frequency and property pValue
                    'heatmap-weight': {
                        'property': 'pValue',
                        'type': 'exponential',
                        'stops': [
                            [0, 1],
                            [1, 0]
                        ]
                    },
                    //Increase the heatmap color weight weight by zoom level
                    //heatmap-intensity is a multiplier on top of heatmap-weight
                    "heatmap-intensity": {
                        "stops": [
                            [0, 1],
                            [1, 1]
                        ]
                    },
                    //Color ramp for heatmap.  Domain is 0 (low) to 1 (high).
                    //Begin color ramp at 0-stop with a 0-transparancy color
                    //to create a blur-like effect.
                    "heatmap-color": {
                        "stops": [
                            [0.00001, '#FC0908'],
                            [1, '#FCA107']
                        ]
                    },
                    //Adjust the heatmap radius by zoom level
                    "heatmap-radius": {
                        "stops": [
                            [0, 2],
                            [9, 20]
                        ]
                    },
                    //Transition from heatmap to circle layer by zoom level
                    "heatmap-opacity": {
                        "default": 0.02,
                        "stops": [
                            [1, 0],
                            [9, 1]
                        ]
                    },
                }
            }, 'points');

            var bounds = geojsonExtent(data);

            map.fitBounds(bounds, { padding: 50 });

        });

    });
</script>